from aiogram import F,Router
import sqlite3 as sq
import asyncio
from aiogram.utils.markdown import link

import time

from aiogram.types import Message,CallbackQuery
from aiogram.filters import CommandStart,Command
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters.callback_data import CallbackData
from confing import TOKEN
from app import database as db
from aiogram.utils.markdown import hbold
import app.keyboards as kb 
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime
from typing import Dict, Tuple
from collections import defaultdict
import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
Base = declarative_base()

router = Router()
load_dotenv()
bot = Bot(token=TOKEN)
dp = Dispatcher()

#router.message(process_group, state="*") 
group_names = {
    "1101-H11": "1101-H11",
    "1101-–Ω9": "1101-–Ω9",
    "1102-–Ω9": "1102-–Ω9",
}
# /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await db.cmdstart(message.from_user.id, message.from_user.username)

    if str(message.from_user.id) in db.get_admin_ids():
        return await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ <b>Hexlet.</b> \n"
                                    "–í—ã - Admin",
                                    reply_markup=kb.main,
                                    parse_mode="HTML")

    user_group = await db.get_user_group(message.from_user.id)
    if user_group:
        group_name = group_names.get(user_group, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ <b>Hexlet.</b> \n"
                             f"–í—ã —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group_name}.",
                             reply_markup=kb.main,
                             parse_mode="HTML") 
        return

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ <b>Hexlet.</b> \n"
                         "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (1101-H11, 1101-–Ω9, 1102-–Ω9)",
                         reply_markup=kb.main,
                         parse_mode="HTML") 

#admin
@router.message(F.text == "/admin")
async def welcome_user(message: Message):
    admin_ids = db.get_admin_ids()
    user_id = str(message.from_user.id) 

    if user_id in admin_ids:
        await message.reply('<b>üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>', reply_markup=kb.admin_panel,parse_mode="HTML")
    else:
        await message.reply('<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>', parse_mode="HTML") 

#id
@router.message(F.text == '/id')
async def id(message: Message):
    await message.answer(f'–í–∞—à ID: <b>{message.from_user.id}</b>',parse_mode='HTML')

#profil
@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def welcome_user(message: Message):
    user_id = message.from_user.id
    group_name = await db.get_user_group(user_id)  

    if str(user_id) in db.get_admin_ids():
        await message.answer("<b>–í—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø—ã.</b>", reply_markup=kb.close_markup, parse_mode="HTML")
    elif group_name: 
        await message.answer(f'''<blockquote><b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{message.from_user.username}</b></blockquote>
        \n<blockquote><b>–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {group_name}</b></blockquote>
        <blockquote><b>–ù–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: 0</b></blockquote>
        \n<b>–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏—è:\n –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 9:00 –¥–æ 16:10/–Ω–µ—Ç—É(comming soon..) </b>
        \n<b>–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏—è:\n –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 9:00 –¥–æ 15:20/–Ω–µ—Ç—É(comming soon..)</b>''', reply_markup=kb.setting, parse_mode="HTML")
    else:
        await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.") 

@router.callback_query(F.data == "close_message")
async def close_message_handler(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await callback.answer()
#–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ 

#–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø
@router.callback_query(F.data.startswith('–≥—Ä—É–ø–ø—ã'))
async def handle_group_selection(callback_query: types.CallbackQuery):
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å",reply_markup=kb.groupprofill)

@router.callback_query(F.data == '–≥—Ä—É–ø–ø–∞1')
async def handle_group_1101_H11(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    selected_group = '1101-H11'

    try:
        conn = sq.connect('database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT group_name FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()

        if result is not None:
            current_group = result[0]
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            admin_ids = get_admin_ids()
            for admin_id in admin_ids:
                admin_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_group_change_{user_id}_{selected_group}"),
                     InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_group_change_{user_id}")]
                ])
                await bot.send_message(
                    admin_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å {current_group} –Ω–∞ {selected_group}.",
                    reply_markup=admin_markup
                )

            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await state.clear()
        else:
            await callback_query.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")

    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

@router.callback_query(F.data == '–≥—Ä—É–ø–ø–∞2')
async def handle_group_1101_n9(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    selected_group = '1101-–Ω9'

    try:
        conn = sq.connect('database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT group_name FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()

        if result is not None:
            current_group = result[0]
            # Send request to admins for approval
            admin_ids = get_admin_ids()
            for admin_id in admin_ids:
                admin_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_group_change_{user_id}_{selected_group}"),
                     InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_group_change_{user_id}")]
                ])
                await bot.send_message(
                    admin_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å {current_group} –Ω–∞ {selected_group}.",
                    reply_markup=admin_markup
                )

            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await state.clear()
        else:
            await callback_query.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")

    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

@router.callback_query(F.data == '–≥—Ä—É–ø–ø–∞3')
async def handle_group_1102_n9(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    selected_group = '1102-–Ω9'

    try:
        conn = sq.connect('database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT group_name FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()

        if result is not None:
            current_group = result[0]
            # Send request to admins for approval
            admin_ids = get_admin_ids()
            for admin_id in admin_ids:
                admin_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_group_change_{user_id}_{selected_group}"),
                     InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_group_change_{user_id}")],
                ])
                await bot.send_message(
                    admin_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å {current_group} –Ω–∞ {selected_group}.",
                    reply_markup=admin_markup
                )

            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await state.clear()
        else:
            await callback_query.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")

    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—Ç–µ —Å–º–µ–Ω–Ω—ã –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith('accept_group_change_'))
async def accept_group_change(callback_query: types.CallbackQuery, bot: Bot):
    data = callback_query.data.split('_')
    user_id = int(data[3])
    selected_group = data[4]

    try:
        conn = sq.connect('database.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        cursor.execute("SELECT group_name FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        current_group = result[0] if result is not None else "None"

        # –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET group_name = ? WHERE user_id = ?", (selected_group, user_id))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã —Å {current_group} –Ω–∞ {selected_group}.")
        await callback_query.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")

    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith('decline_group_change_'))
async def decline_group_change(callback_query: types.CallbackQuery, bot: Bot):
    user_id = int(callback_query.data.split('_')[3])
    
    await bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
    await callback_query.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
 
#–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ 
@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def welcome_user(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:',reply_markup=kb.—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)

#—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.callback_query(F.data=='–≥—Ä—É–ø–ø–∞4')
async def —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ(callback_query: types.CallbackQuery):
    await callback_query.message.answer(f'''<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-17.06.2024
#–ó–∞–Ω—è—Ç–∏—è
09:00   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º.–º–æ–¥—É–ª–µ–π_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–õ)</a>
10:35   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)
10:45   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º.–º–æ–¥—É–ª–µ–π_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–õ)</a>
12:20   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)
12:50   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–ü–†)</a>
14:25   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)</b>
                           
<b>–í—Ç–æ—Ä–Ω–∏–∫-18.06.2024
#	–ó–∞–Ω—è—Ç–∏—è
09:00   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º.–º–æ–¥—É–ª–µ–π_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–õ)</a>
10:35   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)
10:45   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º.–º–æ–¥—É–ª–µ–π_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–õ) </a>
12:20   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)</b>
                                        
<b>–°—Ä–µ–¥–∞(—Å–µ–≥–æ–¥–Ω—è)-19.06.2024
#	–ó–∞–Ω—è—Ç–∏—è
09:00   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º.–º–æ–¥—É–ª–µ–π_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–õ) </a>
10:35   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)
10:45   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º.–º–æ–¥—É–ª–µ–π_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–õ) </a>
12:20   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)
12:50 <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º.–º–æ–¥—É–ª–µ–π_–ü–µ—Ç—Ä—É—à–∫–∏–Ω (–ù—Å–∫)(–õ) </a>
14:25   –ü–µ—Ç—Ä—É—à–∫–∏–Ω –ö.
        –ê—É–¥–∏—Ç–æ—Ä–∏—è (–ù–°–ö)</b>
                                    
<b>–ß–µ—Ç–≤–µ—Ä–≥-20.06.2024
#	–ó–∞–Ω—è—Ç–∏—è                                     
12:50   <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–§–∞—Ä—Ö–µ—Ç–¥–∏–Ω–æ–≤–∞(–ü–†)</a>
14:25   –§–∞—Ä—Ö–µ—Ç–¥–∏–Ω–æ–≤–∞(–ù–°–ö)
        –û–Ω–ª–∞–π–Ω_–§–∞—Ä—Ö–µ—Ç–¥–∏–Ω–æ–≤–∞
14:35<a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–ò–Ω. —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ. –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ñ–µ—Ä–Ω–∞–∫–æ–≤–∞ (–æ–Ω–ª–∞–π–Ω)</a>
16:10   –ñ–µ—Ä–Ω–∞–∫–æ–≤–∞(–ù–°–ö)
        –ú–°–ö –ù–ê–ß–ê–õ–û 10:35</b>
                                        
<b>–ü—è—Ç–Ω–∏—Ü–∞-21.06.2024
#	–ó–∞–Ω—è—Ç–∏—è                                      
10:45 <a href='https://zoom.us/j/3824133784?pwd=bVdublNNT1ZkYXZvRjYrQlBxMkV2dz09'>–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞</a>
12:20   –ö—É–∑–Ω–µ—Ü–æ–≤ –ê. –ò.
        –ö—É–∑–Ω–µ—Ü–æ–≤ –ê. –ò.
        –ù–°–ö_–ë.–•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 2 (–Ω–∞—á–∞–ª–æ –≤ 10.40)</b>
                                        
<b>–°—É–±–±–æ—Ç–∞-22.06.2024
# –ó–∞–Ω—è—Ç–∏—è
–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π</b>''',parse_mode="HTML")

# –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@router.callback_query(F.data == 'list_students')
async def handle_list_students(call: types.CallbackQuery):
    conn = sq.connect('database.db')
    cur = conn.cursor()
    query = "SELECT user_id, username, group_name FROM users WHERE status = 1"
    cur.execute(query)
    students = cur.fetchall()
    conn.close()

    if students:
        student_list = "\n".join([f"ID: {student[0]}, Username: @{student[1]} –ì—Ä—É–ø–ø–∞: {student[2]}" for student in students])
        await call.message.answer(f"<b>–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:</b>\n{student_list}",parse_mode="HTML")
    else:
        await call.message.answer("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")

#—Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
conn = sq.connect('database.db')
cursor = conn.cursor()

class ApplicationState(StatesGroup):
    application_data = State()

#–†–∞—Å—Å—ã–ª–∫–∞
class BroadcastMessage(StatesGroup):
    WAITING_FOR_MESSAGE = State()

@router.callback_query(F.data == 'enter_message')
async def handle_enter_message(call: types.CallbackQuery, state: FSMContext):
    admin_ids = db.get_admin_ids()
    if str(call.from_user.id) in admin_ids:
        await state.set_state(BroadcastMessage.WAITING_FOR_MESSAGE)
        await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
                                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ \"–æ—Ç–º–µ–Ω–∞\", —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.</b>",parse_mode="HTML")
    else:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router.message(BroadcastMessage.WAITING_FOR_MESSAGE)
async def process_soon_message(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    try:
        with sq.connect('database.db') as conn:
            cur = conn.cursor()
            cur.execute("SELECT user_id FROM users")
            users = cur.fetchall()

            for user_id in users:
                try:
                    await bot.send_message(chat_id=user_id[0], text=message.text)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}.")

        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await state.clear()

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—É—Å–ø–µ—à–Ω–æ/–Ω–µ–∫–æ—Ç–æ—Ä—ã–º) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

#–ø—Ä–∏–Ω—è—Ç—å –≤ –≥—Ä—É–ø–ø—É 
@router.callback_query(F.data == 'list_applications')
async def handle_list_applications(call: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sq.connect('database.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
        cursor.execute("SELECT user_id, username, group_name FROM users")
        applications = cursor.fetchall()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        if applications:
            pending_applications = [
                app for app in applications if app[2] is None or app[2] == '' and str(app[0]) not in db.get_admin_ids()
            ]
            if pending_applications:
                pending_list = "\n".join(
                    [f"ID: <b>{app[0]}</b>, Username: @{app[1]}, Group Name: <b>{app[2] if app[2] else '–£–∫–∞–∑–∞–Ω–∞ –≤ –∑–∞—è–≤–∫–µ'}</b>" for app in pending_applications]
                )
                await call.message.answer(f"–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:\n{pending_list}", parse_mode="HTML")
            else:
                await call.message.answer("–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç.")
            await state.set_state('group_name')
        else:
            await call.message.answer("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç.")
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")
    finally:
        if conn:
            conn.close()
            
@router.message(F.text)
async def process_group(message: Message, state: FSMContext):
    user_id = message.from_user.id
    group_name = message.text.strip()

    if str(user_id) in db.get_admin_ids():
        return

    existing_group = await db.get_user_group(user_id)
    if existing_group is not None:
        return  

    if group_name in group_names:
     
        for admin_id in db.get_admin_ids():
            admin_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}_{group_name}"), 
                 InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")]
            ])
            await bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {user_id}) —Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É {group_name}.",
                reply_markup=admin_markup
            )
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
#–ü—Ä–∏–Ω—è—Ç–∏–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É

@router.callback_query(F.data.startswith('accept_'))
async def accept_action(callback: CallbackQuery, bot: Bot):
    try:
        user_id = int(callback.data.split('_')[1])
        group_name = callback.data.split('_')[2] 

        if await db.save_user_group(user_id, group_name):
            await bot.send_message(user_id, f"–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –≥—Ä—É–ø–ø—É {group_name}!")
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç")  # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            await callback.message.edit_reply_markup(reply_markup=None)
        else:
            await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await callback.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")  # –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
    except Exception as e:
        print(f"Error in accept_action: {e}")  # –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 

@router.callback_query(F.data.startswith('decline_'))
async def decline_action(callback: CallbackQuery, bot: Bot):
    try:
        user_id = int(callback.data.split('_')[1])
        await bot.send_message(user_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"Error in decline_action: {e}") 
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
# –ê–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞
MESSAGE_LIMIT = 10
TIME_FRAME = 5
INITIAL_BAN_DURATION = 10 

def get_admin_ids():
    conn = sq.connect('database.db')
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users WHERE status=2")
    admin_ids = [str(row[0]) for row in cur.fetchall()]
    conn.close()
    return admin_ids

user_data: Dict[int, Tuple[list, float, int]] = defaultdict(lambda: ([], 0, 0))

async def antispam_middleware(handler, event: Message, data):
    """Middleware function to check for spam, delete messages, 
       ban users with increasing ban durations, 
       and send ban messages with remaining time.
    """
    user_id = event.from_user.id
    current_time = time.time()

    admin_ids = get_admin_ids() 
    if str(user_id) in admin_ids:
        return await handler(event, data)  

    message_history, ban_time, ban_count = user_data[user_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    if current_time < ban_time:
        try:
            await event.delete()  

            remaining_time = int(ban_time - current_time)
            time_until_unban = str(datetime.timedelta(seconds=remaining_time))

            await event.answer(f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –µ—â—ë –Ω–∞ {time_until_unban}.")

        except Exception as e:
            print(f"Error handling ban: {e}") 
        return  

    message_history = [
        timestamp for timestamp in message_history
        if current_time - timestamp <= TIME_FRAME
    ]

    user_data[user_id] = (message_history, ban_time, ban_count)

    if len(message_history) >= MESSAGE_LIMIT:
        ban_count += 1
        ban_duration = INITIAL_BAN_DURATION * ban_count 

        # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id] = ([], current_time + ban_duration, ban_count)

        try:
            await event.delete()  
            await event.answer(
                f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {ban_duration} —Å–µ–∫—É–Ω–¥ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∞–º."
            )
        except Exception as e:
            print(f"Error handling ban: {e}")  
        return  

    message_history.append(current_time)
    return await handler(event, data)

router.message.middleware(antispam_middleware)